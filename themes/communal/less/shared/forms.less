// # Forms
//
// Styleguide #

// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  // Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: @line-height-base;
  font-size: (@font-size-base * 1.5);
  line-height: inherit;
  color: @legend-color;
  border: 0;
  border-bottom: 1px solid @legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content
  margin-bottom: 5px;
  font-weight: bold;
}

// -----------------------------------------------------------------------------

// ## Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control()` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
//
// Styleguide #.1

.form-control() {
  display: block;
  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style
  border: 0;
  border-radius: @input-border-radius;
  box-shadow: 0 0 0 1px transparent, 0 0 0 1px @input-border inset;
  transition: box-shadow ease-in-out 150ms;

  &:focus {
    background-color: @input-bg;
    box-shadow: 0 0 0 1px @input-border-focus, 0 0 0 1px @input-border-focus inset;
  }

  // Placeholder
  &::placeholder {
    color: @input-color-placeholder;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
  }
}

// -----------------------------------------------------------------------------

// ## Radios and checkboxes
//
// Styleguide #.2

.iradio,
.icheckbox {
  display: inline-block;

  &:before {
    .icon();
    width: 1em;
    color: @gray-light;
  }

  &.checked:before {
    color: @brand-primary;
  }
}

.iradio {
  &:before {
    content: @icon-circle;
  }

  &.checked:before {
    content: @icon-ok-sign;
  }
}

.icheckbox {
  &:before {
    content: @icon-sign-blank;
  }

  &.checked:before {
    content: @icon-check-sign;
  }
}

// -----------------------------------------------------------------------------

input.InputBox,
textarea.TextBox {
  .form-control();
}

.RadioLabel,
.CheckBoxLabel {
  cursor: pointer;
}

.FormWrapper {
  padding: 0;
  background-color: transparent;
}

// -----------------------------------------------------------------------------

.CommentForm {
  .WriteButton,
  .PreviewButton,
  .DraftButton {
    margin: 0;
  }
}
